type NodeLicenseApprovalEvent @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NodeLicenseApprovalForAllEvent @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NodeLicenseClaimableChangedEvent @entity(immutable: true) {
  id: Bytes!
  admin: Bytes! # address
  newClaimableState: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NodeLicenseFundsReceiverChangedEvent @entity(immutable: true) {
  id: Bytes!
  admin: Bytes! # address
  newFundsReceiver: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NodeLicenseFundsWithdrawnEvent @entity(immutable: true) {
  id: Bytes!
  admin: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NodeLicenseInitializedEvent @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NodeLicensePricingTierSetOrAddedEvent @entity(immutable: true) {
  id: Bytes!
  index: BigInt! # uint256
  price: BigInt! # uint256
  quantity: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NodeLicensePromoCodeCreatedEvent @entity(immutable: true) {
  id: Bytes!
  promoCode: String! # string
  recipient: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NodeLicensePromoCodeRemovedEvent @entity(immutable: true) {
  id: Bytes!
  promoCode: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NodeLicenseReferralRewardEvent @entity(immutable: true) {
  id: Bytes!
  buyer: Bytes! # address
  referralAddress: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NodeLicenseReferralRewardPercentagesChangedEvent @entity(immutable: true) {
  id: Bytes!
  referralDiscountPercentage: BigInt! # uint256
  referralRewardPercentage: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NodeLicenseRefundOccurredEvent @entity(immutable: true) {
  id: Bytes!
  refundee: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NodeLicenseRewardClaimedEvent @entity(immutable: true) {
  id: Bytes!
  claimer: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type NodeLicenseRoleAdminChangedEvent @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  previousAdminRole: Bytes! # bytes32
  newAdminRole: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NodeLicenseRoleGrantedEvent @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NodeLicenseRoleRevokedEvent @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NodeLicenseTransferEvent @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NodeLicenseWhitelistAmountRedeemedEvent @entity(immutable: true) {
  id: Bytes!
  redeemer: Bytes! # address
  newAmount: Int! # uint16
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NodeLicenseWhitelistAmountUpdatedByAdminEvent @entity(immutable: true) {
  id: Bytes!
  redeemer: Bytes! # address
  newAmount: Int! # uint16
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SentryKey implements Submission @entity(immutable: false) {
  id: ID!
  owner: Bytes! # address
  keyId: BigInt!
  mintTimeStamp: BigInt!
  assignedPool: Bytes # address not required
  submissions: [Submission!]
}