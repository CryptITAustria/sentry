type RefereeAssertionSubmittedEvent @entity(immutable: true) {
  id: Bytes!
  challengeId: BigInt! # uint256
  nodeLicenseId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RefereeChallengeClosedEvent @entity(immutable: true) {
  id: Bytes!
  challengeNumber: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RefereeChallengeExpiredEvent @entity(immutable: true) {
  id: Bytes!
  challengeId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RefereeChallengeSubmittedEvent @entity(immutable: true) {
  id: Bytes!
  challengeNumber: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RefereeRewardsClaimedEvent @entity(immutable: true) {
  id: Bytes!
  challengeId: BigInt! # uint256
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

enum ChallengeStatus {
  OpenForSubmissions
  OpenForClaims
  Expired
}

type Challenge @entity(immutable: false) {
  id: ID!
  challengeNumber: BigInt! # uint256
  status: ChallengeStatus!
  assertionId: BigInt! # uint256
  assertionStateRootOrConfirmData: Bytes! # bytes
  assertionTimestamp: BigInt! # uint64
  challengerSignedHash: Bytes! # bytes
  activeChallengerPublicKey: Bytes! # bytes
  rollupUsed: Bytes! # address
  createdTimestamp: BigInt! # uint256
  totalSupplyOfNodesAtChallengeStart: BigInt! # uint256
  rewardAmountForClaimers: BigInt! # uint256
  amountForGasSubsidy: BigInt! # uint256
  numberOfEligibleClaimers: BigInt! # uint256
  amountClaimedByClaimers: BigInt! # uint256
}

type Submission @entity(immutable: false) {
  id: ID!
  submitted: Boolean!
  claimed: Boolean!
  eligibleForPayout: Boolean!
  nodeLicenseId: BigInt! # address
  assertionsStateRootOrConfirmData: String!
}