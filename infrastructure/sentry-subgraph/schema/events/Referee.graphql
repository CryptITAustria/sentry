type RefereeApprovalEvent @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RefereeAssertionCheckingToggledEvent @entity(immutable: true) {
  id: Bytes!
  newState: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RefereeAssertionSubmittedEvent @entity(immutable: true) {
  id: Bytes!
  challengeId: BigInt! # uint256
  nodeLicenseId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RefereeChallengeClosedEvent @entity(immutable: true) {
  id: Bytes!
  challengeNumber: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RefereeChallengeExpiredEvent @entity(immutable: true) {
  id: Bytes!
  challengeId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RefereeChallengeSubmittedEvent @entity(immutable: true) {
  id: Bytes!
  challengeNumber: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RefereeChallengerPublicKeyChangedEvent @entity(immutable: true) {
  id: Bytes!
  newChallengerPublicKey: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RefereeInitializedEvent @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RefereeInvalidSubmissionEvent @entity(immutable: true) {
  id: Bytes!
  challengeId: BigInt! # uint256
  nodeLicenseId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RefereeKycStatusChangedEvent @entity(immutable: true) {
  id: Bytes!
  wallet: Bytes! # address
  isKycApproved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RefereeNodeLicenseAddressChangedEvent @entity(immutable: true) {
  id: Bytes!
  newNodeLicenseAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RefereeRewardsClaimedEvent @entity(immutable: true) {
  id: Bytes!
  challengeId: BigInt! # uint256
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RefereeRoleAdminChangedEvent @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  previousAdminRole: Bytes! # bytes32
  newAdminRole: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RefereeRoleGrantedEvent @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RefereeRoleRevokedEvent @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RefereeRollupAddressChangedEvent @entity(immutable: true) {
  id: Bytes!
  newRollupAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RefereeStakedV1Event @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  amount: BigInt! # uint256
  totalStaked: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RefereeStakingEnabledEvent @entity(immutable: true) {
  id: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RefereeUnstakeV1Event @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  amount: BigInt! # uint256
  totalStaked: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RefereeUpdateMaxStakeAmountEvent @entity(immutable: true) {
  id: Bytes!
  prevAmount: BigInt! # uint256
  newAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

enum ChallengeStatus {
  OpenForSubmissions
  OpenForClaims
  Expired
}

type Challenge @entity(immutable: false) {
  id: ID!
  challengeNumber: BigInt! # uint256
  status: ChallengeStatus!
  assertionId: BigInt! # uint256
  assertionStateRootOrConfirmData: Bytes! # bytes
  assertionTimestamp: BigInt! # uint64
  challengerSignedHash: Bytes! # bytes
  activeChallengerPublicKey: Bytes! # bytes
  rollupUsed: Bytes! # address
  createdTimestamp: BigInt! # uint256
  totalSupplyOfNodesAtChallengeStart: BigInt! # uint256
  rewardAmountForClaimers: BigInt! # uint256
  amountForGasSubsidy: BigInt! # uint256
  numberOfEligibleClaimers: BigInt! # uint256
  amountClaimedByClaimers: BigInt! # uint256
}

